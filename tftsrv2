#!/bin/sh
# @(#) Tiny File Transmit SeRVice/SeRVer. Version 1.0.0.20140608

# Copyright (c) 2014 eel3
# 
# This software is provided 'as-is', without any express or implied
# warranty. In no event will the authors be held liable for any damages
# arising from the use of this software.
# 
# Permission is granted to anyone to use this software for any purpose,
# including commercial applications, and to alter it and redistribute it
# freely, subject to the following restrictions:
# 
#     1. The origin of this software must not be misrepresented; you must not
#     claim that you wrote the original software. If you use this software
#     in a product, an acknowledgment in the product documentation would be
#     appreciated but is not required.
# 
#     2. Altered source versions must be plainly marked as such, and must not be
#     misrepresented as being the original software.
# 
#     3. This notice may not be removed or altered from any source
#     distribution.

PATH=/bin:/usr/bin:/usr/local/bin

readonly progname=`basename "$0"`

# this server application name.
readonly appname="tftsrv2/1.0.0"

# There are several implementations named `netcat', and they have different options.
#
# For traditional netcat (Debian GNU/Linux 5.0):
# readonly nccmd="nc -l -q 0 -p"
#
# For OpenBSD netcat (Ubuntu 10.04):
readonly nccmd="nc -l"

# echo command for HTTP request/response.
#
# Usually use:
# readonly httpecho="echo -n -e"
#
# In Ubuntu 10.04 (bash 4.1.5), echo can't interpret `-e' option:
readonly httpecho="echo -n"
#
# In Mac OS X 10.8
# readonly httpecho=printf

# Default parameters.
readonly defport=5432
readonly deffile='-'

# echo(1) to stderr
error() {
    echo "$progname:" ${@+"$@"} 1>&2
}

# write usage to $1
usage() {
    cat <<- EOT >"$1"
		$appname - Tiny File Transmit SeRVice/SeRVer (fake httpd)
		usage: $progname [-h] [-p port] [-f file]
		option:
		    -f  Translation file (or stdin)
		    -h  Show this text and exit
		    -p  Listen port (usually not needed). Default is $defport
	EOT
}

# parse options
port=$defport
file=$deffile

opt=
while getopts 'f:hp:' opt; do
    case $opt in
    f)      file=$OPTARG
            if [ "$file" != '-' -a ! -f "$file" ]; then
                error "$file: Invalid argument"
                exit 1
            fi
            ;;
    h)      usage /dev/stdout
            exit 0
            ;;
    p)      port=$OPTARG
            ;;
    \?)     usage /dev/stderr
            exit 1
            ;;
    esac
done
shift `expr $OPTIND - 1`

if [ $# -ne 0 ]; then
    usage /dev/stderr
    exit 1
fi

# read from stdin, then write to temporary file (when need)
if [ "$file" = '-' ]; then
    trap 'rm -f "$tmpfile"; exit 0' 1 2 15
    readonly tmpfile=`mktemp "/tmp/$$-XXXXXXXXXX"`
    if [ $? -ne 0 ]; then
        error "cannot create temporary file"
        exit 1
    fi
    cat >"$tmpfile"
    file=$tmpfile
fi

# exec dummy HTTP service
while : ; do
    {
        $httpecho "HTTP/1.0 200 OK\r\n"
        $httpecho "Date: `LANG=C date -u '+%a, %d %b %Y %T GMT'`\r\n"
        $httpecho "Server: $appname\r\n"
        $httpecho "Content-Length: `wc -c <"$file" | sed 's/[ \t]*//g'`\r\n"
        $httpecho "Content-Type: application/octet-stream\r\n"
        $httpecho "Connection: close\r\n"
        $httpecho "\r\n"
        cat "$file"
    } | $nccmd $port

    [ $? -eq 0 ] || break
done

rm -f "$tmpfile"
exit 0
